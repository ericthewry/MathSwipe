// Generated by CoffeeScript 1.9.3
var DFS, ExpressionGenerator, GameGrid, InputSolver, LastInColumn, Tuple, TupleSet, allCells, each, expression, i, index, j, k, l, len, len1, len2, len3, length, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, seed, stringPlacement, testGrid;

DFS = require("./app/services/DFS");

ExpressionGenerator = require("./app/services/ExpressionGenerator");

GameGrid = require("./app/models/GameGrid");

InputSolver = require("./app/services/InputSolver");

LastInColumn = require("./app/services/LastInColumn");

Tuple = require("./app/models/Tuple");

TupleSet = require("./app/models/TupleSet");

for (length = k = 1; k <= 30; length = ++k) {
  expression = ExpressionGenerator.generate(length);
  console.log(length, expression, InputSolver.compute(expression));
}

this.grid = new GameGrid(4);

testGrid = new DFS(this.grid);

stringPlacement = new TupleSet;

seed = {
  x: 1,
  y: 1
};

testGrid.search(seed, "11+22", stringPlacement);

ref = this.grid.grid;
for (l = 0, len = ref.length; l < len; l++) {
  each = ref[l];
  console.log(each);
}

for (m = 0, len1 = stringPlacement.length; m < len1; m++) {
  each = stringPlacement[m];
  console.log(each);
}

seed = stringPlacement.list[stringPlacement.length() - 1];

console.log(seed);

stringPlacement = new TupleSet;

testGrid.search(seed, "33-44", stringPlacement);

ref1 = this.grid.grid;
for (n = 0, len2 = ref1.length; n < len2; n++) {
  each = ref1[n];
  console.log(each);
}

allCells = new TupleSet;

for (i = o = 0, ref2 = this.grid.dimension; 0 <= ref2 ? o <= ref2 : o >= ref2; i = 0 <= ref2 ? ++o : --o) {
  for (j = p = 0, ref3 = this.grid.dimension; 0 <= ref3 ? p <= ref3 : p >= ref3; j = 0 <= ref3 ? ++p : --p) {
    allCells.push(new Tuple(i, j));
  }
}

for (index = q = 0, ref4 = allCells.length(); 0 <= ref4 ? q < ref4 : q > ref4; index = 0 <= ref4 ? ++q : --q) {
  seed = allCells.at(index);
  stringPlacement = new TupleSet;
  if (testGrid.search(seed, "55*667", stringPlacement)) {
    break;
  }
}

console.log("\n");

ref5 = this.grid.grid;
for (r = 0, len3 = ref5.length; r < len3; r++) {
  each = ref5[r];
  console.log(each);
}
