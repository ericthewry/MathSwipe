// Generated by CoffeeScript 1.9.3
var DFS, GameGrid, InputSolver, LastInColumn, Tuple, TupleSet, allCells, each, i, index, j, k, l, len, m, n, ref, ref1, ref2, seed, stringPlacement, testGrid;

DFS = require("./app/services/DFS");

GameGrid = require("./app/models/GameGrid");

InputSolver = require("./app/services/InputSolver");

LastInColumn = require("./app/services/LastInColumn");

Tuple = require("./app/models/Tuple");

TupleSet = require("./app/models/TupleSet");

this.grid = new GameGrid(3);

testGrid = new DFS(this.grid);

stringPlacement = new TupleSet;

seed = {
  x: 1,
  y: 1
};

testGrid.search(seed, "1+2", stringPlacement);

console.log(this.grid.grid[0]);

console.log(this.grid.grid[1]);

console.log(this.grid.grid[2]);

for (k = 0, len = stringPlacement.length; k < len; k++) {
  each = stringPlacement[k];
  console.log(each);
}

seed = stringPlacement.list[stringPlacement.length() - 1];

console.log(seed);

stringPlacement = new TupleSet;

testGrid.search(seed, "3-4", stringPlacement);

console.log(this.grid.grid[0]);

console.log(this.grid.grid[1]);

console.log(this.grid.grid[2]);

allCells = new TupleSet;

for (i = l = 0, ref = this.grid.dimension; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
  for (j = m = 0, ref1 = this.grid.dimension; 0 <= ref1 ? m <= ref1 : m >= ref1; j = 0 <= ref1 ? ++m : --m) {
    allCells.push(new Tuple(i, j));
  }
}

for (index = n = 0, ref2 = allCells.length(); 0 <= ref2 ? n < ref2 : n > ref2; index = 0 <= ref2 ? ++n : --n) {
  seed = allCells.at(index);
  stringPlacement = new TupleSet;
  if (testGrid.search(seed, "5*6", stringPlacement)) {
    break;
  }
}

console.log(this.grid.grid[0]);

console.log(this.grid.grid[1]);

console.log(this.grid.grid[2]);
