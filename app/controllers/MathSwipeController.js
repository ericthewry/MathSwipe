// Generated by CoffeeScript 1.9.3
var $, AdjacentCellsCalculator, Board, Cell, Colors, DFS, ExpressionGenerator, GameGrid, InputSolver, MathSwipeController, Tuple,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

InputSolver = require('../services/InputSolver');

DFS = require('../services/DFS');

ExpressionGenerator = require('../services/ExpressionGenerator');

AdjacentCellsCalculator = require('../services/AdjacentCellsCalculator');

Tuple = require('../models/Tuple');

GameGrid = require('../models/GameGrid');

Board = require('../views/Board');

Cell = require('../views/Cell');

Colors = require('../views/Colors');

$ = require('jquery');

MathSwipeController = (function() {
  function MathSwipeController() {
    this.testDFS = bind(this.testDFS, this);
    this.testInputSolver = bind(this.testInputSolver, this);
    this.testCellDelete = bind(this.testCellDelete, this);
    this.testExpGen = bind(this.testExpGen, this);
    this.tests = bind(this.tests, this);
    var symbols, two;
    this.gridModel = new GameGrid(4);
    two = this.createTwo();
    symbols = this.getSymbols(two);
    this.board = new Board(this.gridModel, two, Cell, Colors);
    this.tests();
  }

  MathSwipeController.prototype.createTwo = function() {
    var two;
    two = new Two({
      fullscreen: true,
      autostart: true
    }).appendTo(document.getElementById('game'));
    return two;
  };

  MathSwipeController.prototype.getSymbols = function(two) {
    var i, j, len, s, svgs, symbols;
    svgs = $('#assets svg');
    symbols = [];
    for (i = j = 0, len = svgs.length; j < len; i = ++j) {
      s = svgs[i];
      symbols.push(two.interpret(s));
      symbols[i].visible = false;
    }
    two.update();
    return symbols;
  };

  MathSwipeController.prototype.tests = function() {
    this.testExpGen();
    this.testDFS();
    this.testCellDelete();
    return this.testInputSolver();
  };

  MathSwipeController.prototype.testExpGen = function() {
    var expression, j, length, results;
    results = [];
    for (length = j = 1; j <= 30; length = ++j) {
      expression = ExpressionGenerator.generate(length);
      results.push(console.log(length, expression, InputSolver.compute(expression)));
    }
    return results;
  };

  MathSwipeController.prototype.testCellDelete = function() {
    var soln, solution;
    solution = [new Tuple(0, 3), new Tuple(0, 2), new Tuple(1, 1)];
    soln = [new Tuple(3, 3), new Tuple(2, 3), new Tuple(0, 3)];
    this.board.deleteCells(solution);
    return this.board.deleteCells(soln);
  };

  MathSwipeController.prototype.testInputSolver = function() {
    return console.log(InputSolver.compute('1+2*3'));
  };

  MathSwipeController.prototype.testDFS = function() {
    var inputList;
    inputList = ['1111', '2222', '3333', '4444'];
    return DFS.setEquationsOnGrid(this.gridModel, inputList, AdjacentCellsCalculator);
  };

  return MathSwipeController;

})();

module.exports = MathSwipeController;
