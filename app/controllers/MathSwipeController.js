// Generated by CoffeeScript 1.9.3
var GameGrid, InputSolver, MathSwipeController;

InputSolver = require('../services/InputSolver');

GameGrid = require('../models/GameGrid');

MathSwipeController = (function() {
  function MathSwipeController() {
    var board, boardX, boardY, i, j, k, l, offset, rect, ref, ref1, size, width;
    console.log(InputSolver.compute("1+2*3"));
    this.gridModel = new GameGrid(3);
    this.two = new Two({
      fullscreen: true,
      autostart: true
    }).appendTo(document.body);
    size = this.two.height * .80;
    offset = size * .025;
    width = (size - offset) / this.gridModel.dimension - offset;
    boardX = this.two.width / 2;
    boardY = this.two.height / 2;
    boardY = boardY < size / 2 ? size / 2 : boardY;
    board = this.two.makeRectangle(boardX, boardY, size, size);
    board.fill = '#F0F8FF';
    this.startX = boardX - (size + width) / 2;
    this.startY = boardY - (size + width) / 2;
    this.change = offset + width;
    this.gridView = [];
    for (i = k = 1, ref = this.gridModel.dimension; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
      this.gridView.push([]);
      for (j = l = 1, ref1 = this.gridModel.dimension; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {
        rect = this.two.makeRectangle(this.getX(j), this.getY(i), width, width);
        rect.fill = '#FFEBCD';
        this.gridView[i - 1].push(rect);
      }
    }
    this.two.update();
  }

  MathSwipeController.prototype.deleteCell = function(y, x) {
    return this.gridView[y][x].fill = '#FFFFFF';
  };

  MathSwipeController.prototype.pushAllCellsToBottom = function() {
    var col, k, l, m, ref, ref1, ref2, row, up;
    this.two.update();
    for (row = k = ref = this.gridModel.dimension - 1; ref <= 1 ? k <= 1 : k >= 1; row = ref <= 1 ? ++k : --k) {
      for (col = l = ref1 = this.gridModel.dimension - 1; ref1 <= 0 ? l <= 0 : l >= 0; col = ref1 <= 0 ? ++l : --l) {
        if (this.gridView[row][col].fill === '#FFFFFF') {
          for (up = m = ref2 = row - 1; ref2 <= 0 ? m <= 0 : m >= 0; up = ref2 <= 0 ? ++m : --m) {
            if (this.gridView[up][col].fill !== '#FFFFFF') {
              this.shiftCellTo(this.gridView[row][col], col, up);
              this.shiftCellTo(this.gridView[up][col], col, row);
              this.swapView(row, col, up, col);
              break;
            }
          }
        }
      }
    }
    return this.two.update();
  };

  MathSwipeController.prototype.shiftCellTo = function(cell, x, y) {
    cell.translation.set(this.getX(x) + this.change, this.getY(y) + this.change);
    this.two.update();
    return cell;
  };

  MathSwipeController.prototype.swapView = function(r0, c0, r1, c1) {
    var temp;
    temp = this.gridView[r0][c0];
    this.gridView[r0][c0] = this.gridView[r1][c1];
    this.gridView[r1][c1] = temp;
    return this.two.update();
  };

  MathSwipeController.prototype.getX = function(colIdx) {
    return this.startX + colIdx * this.change;
  };

  MathSwipeController.prototype.getY = function(rowIdx) {
    return this.startY + rowIdx * this.change;
  };

  return MathSwipeController;

})();

module.exports = MathSwipeController;
