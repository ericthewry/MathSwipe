// Generated by CoffeeScript 1.9.3
var $, Cell, Colors;

$ = require('jquery');

Colors = require('./Colors');

Cell = (function() {
  function Cell(col1, row1, board, clickHandler, value, gridCellStyle) {
    var cell;
    this.col = col1;
    this.row = row1;
    this.board = board;
    this.clickHandler = clickHandler;
    this.gridCellStyle = gridCellStyle;
    this.isDeleted = this.isSelected = false;
    cell = '<div id="cell-' + this.row + '-' + this.col + '" class="cell">' + value + '</div>';
    $('#cell-row-' + this.row).append(cell);
    $('#cell-' + this.row + '-' + this.col).css(this.gridCellStyle);
    this.setColor(Colors.cell);
    if (!this.clickHandler.isOnMobile()) {
      this.bindMouseOver();
      this.bindMouseUp();
      this.bindMouseDown();
    } else {
      this.bindClick();
    }
  }

  Cell.prototype.setColor = function(c) {
    this.color = c;
    return $('#cell-' + this.row + '-' + this.col).css('color', c);
  };

  Cell.prototype.setBorder = function(c) {
    this.rect.stroke = c;
    return this.rect.linewidth = 6;
  };

  Cell.prototype.hide = function() {
    return $('#cell-' + this.row + '-' + this.col).empty();
  };

  Cell.prototype.setIndices = function(row, col) {
    if ((row != null) && (col != null)) {
      $('#cell-' + this.row + '-' + this.col).attr('id', 'cell-' + row + '-' + col);
      this.row = row;
      return this.col = col;
    }
  };

  Cell.prototype.shiftTo = function(row, col) {
    var distance;
    distance = this.board.dropDownDistance * (row - this.row);
    $("#cell-" + this.row + "-" + this.col).css("transform", "translate(0, " + distance + "px)");
    return this.setIndices(row, col);
  };

  Cell.prototype.bindClick = function() {
    return $('#cell-' + this.row + '-' + this.col).click((function(_this) {
      return function(e) {
        e.preventDefault();
        e.stopPropagation();
        if (_this.isDeleted) {
          return;
        }
        if (!_this.isSelected) {
          return _this.clickHandler.onSelect(_this);
        } else {
          return _this.clickHandler.onUnselect(_this);
        }
      };
    })(this));
  };

  Cell.prototype.bindMouseOver = function() {
    return $('#cell-' + this.row + '-' + this.col).mouseover((function(_this) {
      return function(e) {
        e.preventDefault();
        e.stopPropagation();
        if (_this.isDeleted) {
          return;
        }
        if (!_this.isSelected && _this.clickHandler.isMouseDown()) {
          return _this.clickHandler.onSelect(_this);
        }
      };
    })(this));
  };

  Cell.prototype.bindMouseUp = function() {
    return $('#cell-' + this.row + '-' + this.col).mouseup((function(_this) {
      return function(e) {
        e.preventDefault();
        e.stopPropagation();
        return _this.clickHandler.setMouseAsUp();
      };
    })(this));
  };

  Cell.prototype.bindMouseDown = function() {
    return $('#cell-' + this.row + '-' + this.col).mousedown((function(_this) {
      return function(e) {
        e.preventDefault();
        e.stopPropagation();
        if (_this.isDeleted) {
          return;
        }
        if (!_this.isSelected) {
          return _this.clickHandler.onSelect(_this);
        }
      };
    })(this));
  };

  Cell.prototype.select = function() {
    this.isSelected = true;
    return this.setColor(Colors.select);
  };

  Cell.prototype.unselect = function() {
    this.isSelected = false;
    return this.setColor(Colors.cell);
  };

  Cell.prototype["delete"] = function() {
    this.hide();
    return this.isDeleted = true;
  };

  Cell.prototype.x = function() {
    return this.col;
  };

  Cell.prototype.y = function() {
    return this.row;
  };

  return Cell;

})();

module.exports = Cell;
