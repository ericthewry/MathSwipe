// Generated by CoffeeScript 1.9.3
var GoalContainer;

GoalContainer = (function() {
  function GoalContainer(scene, inputs, symbols, Colors) {
    this.scene = scene;
    this.inputs = inputs;
    this.symbols = symbols;
    this.Colors = Colors;
    this.inputsToSymbols();
    this.show();
  }

  GoalContainer.prototype.inputsToSymbols = function() {
    var character, i, index, input, j, len, len1, ref, ref1;
    this.inputSymbols = [];
    this.count = 0;
    ref = this.inputs;
    for (index = i = 0, len = ref.length; i < len; index = ++i) {
      input = ref[index];
      this.inputSymbols.push([]);
      ref1 = input.toString();
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        character = ref1[j];
        this.inputSymbols[index].push(this.symbols[this.charToIndex(character)].clone());
        this.count++;
      }
      this.count++;
    }
    this.count--;
    return this.inputSymbols;
  };

  GoalContainer.prototype.show = function() {
    var character, i, index, inputStr, j, len, len1, ref, symbolSize;
    index = 0;
    symbolSize = this.scene.width / this.count;
    ref = this.inputSymbols;
    for (i = 0, len = ref.length; i < len; i++) {
      inputStr = ref[i];
      for (j = 0, len1 = inputStr.length; j < len1; j++) {
        character = inputStr[j];
        character.translation.set(index * symbolSize, 0);
        character.noStroke().fill = '#EFE8BE';
        character.visible = true;
        character.scale = Math.min(1, (this.scene.width / 100) / this.count);
        this.scene.add(character);
        index++;
      }
      index++;
    }
    return this.scene.update();
  };

  GoalContainer.prototype.charToIndex = function(character) {
    switch (character) {
      case '+':
        return 10;
      case '-':
        return 11;
      case '*':
        return 12;
      default:
        return parseInt(character);
    }
  };

  GoalContainer.prototype.deleteGoal = function(index) {
    var character, i, len, ref, results;
    ref = this.inputSymbols[index];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      character = ref[i];
      results.push(character.noStroke().fill = '#2F4F4F');
    }
    return results;
  };

  GoalContainer.prototype.resetGoals = function() {
    var character, i, inputStr, len, ref, results;
    ref = this.inputSymbols;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      inputStr = ref[i];
      results.push((function() {
        var j, len1, results1;
        results1 = [];
        for (j = 0, len1 = inputStr.length; j < len1; j++) {
          character = inputStr[j];
          results1.push(character.noStroke().fill = '#EFE8BE');
        }
        return results1;
      })());
    }
    return results;
  };

  return GoalContainer;

})();

module.exports = GoalContainer;
