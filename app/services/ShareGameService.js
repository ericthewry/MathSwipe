// Generated by CoffeeScript 1.9.3
var $, ShareGameService, SolutionService;

$ = require('jquery');

SolutionService = require('./SolutionService');

ShareGameService = (function() {
  function ShareGameService() {}

  ShareGameService.reloadPageWithHash = function(board, solutionPlacements, inputLengths) {
    var col, expression, goal, hashVal, j, k, l, len, len1, len2, len3, m, ref, ref1, row;
    console.log(this.checkSolutionPlacements(board, solutionPlacements, inputLengths));
    hashVal = '';
    ref = board.initialValues;
    for (j = 0, len = ref.length; j < len; j++) {
      row = ref[j];
      for (k = 0, len1 = row.length; k < len1; k++) {
        col = row[k];
        hashVal += col;
      }
    }
    ref1 = board.goals;
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      goal = ref1[l];
      hashVal += '_' + goal;
    }
    hashVal += '_';
    for (m = 0, len3 = solutionPlacements.length; m < len3; m++) {
      expression = solutionPlacements[m];
      hashVal += '&' + expression.row + ',' + expression.col;
    }
    return window.location.hash = hashVal;
  };

  ShareGameService.checkSolutionPlacements = function(board, solutionPlacements, inputLengths) {
    var clickedCells, col, expression, i, index, j, k, l, len, len1, len2, m, n, ref, ref1, ref2, ref3, row, temp, value;
    this.tempBoard = {};
    this.tempBoard.boardValues = [];
    ref = board.initialValues;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      row = ref[i];
      this.tempBoard.boardValues.push([]);
      for (k = 0, len1 = row.length; k < len1; k++) {
        col = row[k];
        this.tempBoard.boardValues[i].push(col);
      }
    }
    this.solutionService = new SolutionService(this.tempBoard, board.goals);
    index = 0;
    console.log(inputLengths);
    for (l = 0, len2 = inputLengths.length; l < len2; l++) {
      expression = inputLengths[l];
      clickedCells = [];
      temp = index;
      for (value = m = 0, ref1 = expression.length; 0 <= ref1 ? m < ref1 : m > ref1; value = 0 <= ref1 ? ++m : --m) {
        clickedCells.push(solutionPlacements[index++]);
      }
      this.solutionService.initialize(clickedCells);
      for (temp = n = ref2 = temp, ref3 = index; ref2 <= ref3 ? n < ref3 : n > ref3; temp = ref2 <= ref3 ? ++n : --n) {
        this.tempBoard.boardValues[solutionPlacements[temp].row][solutionPlacements[temp].col] = ' ';
      }
      this.pushDownTempBoard();
      if (!this.solutionService.isSolution()) {
        return false;
      }
    }
    return true;
  };

  ShareGameService.pushDownTempBoard = function() {
    var col, j, ref, results, row, up;
    results = [];
    for (row = j = ref = this.tempBoard.boardValues.length - 1; ref <= 1 ? j <= 1 : j >= 1; row = ref <= 1 ? ++j : --j) {
      results.push((function() {
        var k, ref1, results1;
        results1 = [];
        for (col = k = ref1 = this.tempBoard.boardValues.length - 1; ref1 <= 0 ? k <= 0 : k >= 0; col = ref1 <= 0 ? ++k : --k) {
          if (this.tempBoard.boardValues[row][col] === ' ') {
            results1.push((function() {
              var l, ref2, results2;
              results2 = [];
              for (up = l = ref2 = row - 1; ref2 <= 0 ? l <= 0 : l >= 0; up = ref2 <= 0 ? ++l : --l) {
                if (this.tempBoard.boardValues[up][col] !== ' ') {
                  this.swapCells(row, col, up, col);
                  break;
                } else {
                  results2.push(void 0);
                }
              }
              return results2;
            }).call(this));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  ShareGameService.swapCells = function(r1, c1, r2, c2) {
    var temp;
    temp = this.tempBoard.boardValues[r1][c1];
    this.tempBoard.boardValues[r1][c1] = this.tempBoard.boardValues[r2][c2];
    return this.tempBoard.boardValues[r2][c2] = temp;
  };

  return ShareGameService;

})();

module.exports = ShareGameService;
