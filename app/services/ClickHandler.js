// Generated by CoffeeScript 1.9.3
var $, ClickHandler, Tuple,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

$ = require('jquery');

Tuple = require('../models/Tuple');

ClickHandler = (function() {
  function ClickHandler(board, two, solutionService, goalContainer, clicked) {
    var cell, j, k, len, len1, ref, row;
    this.board = board;
    this.solutionService = solutionService;
    this.goalContainer = goalContainer;
    this.clicked = clicked != null ? clicked : [];
    this.mouseDown = false;
    if (this.board.cells == null) {
      return;
    }
    ref = this.board.cells;
    for (j = 0, len = ref.length; j < len; j++) {
      row = ref[j];
      if (row.length === 0) {
        break;
      }
      for (k = 0, len1 = row.length; k < len1; k++) {
        cell = row[k];
        if (cell.isSelected) {
          this.addToClicked(cell);
        }
      }
    }
  }

  ClickHandler.prototype.bindDefaultMouseEvents = function() {
    var body;
    body = $('body');
    body.click((function(_this) {
      return function(e) {
        e.preventDefault();
        return _this.unselectAll();
      };
    })(this));
    body.mousedown((function(_this) {
      return function(e) {
        return e.preventDefault();
      };
    })(this));
    return body.mouseup((function(_this) {
      return function(e) {
        e.preventDefault();
        _this.setMouseDown(false);
        return _this.unselectAll();
      };
    })(this));
  };

  ClickHandler.prototype.tuplesClicked = function() {
    var cell, j, len, ref, tuples;
    tuples = [];
    ref = this.clicked;
    for (j = 0, len = ref.length; j < len; j++) {
      cell = ref[j];
      tuples.push(new Tuple(cell.col, cell.row));
    }
    return tuples;
  };

  ClickHandler.prototype.addToClicked = function(cell) {
    if (cell.isDeleted) {
      return;
    }
    return this.clicked.push(cell);
  };

  ClickHandler.prototype.removeFromClicked = function() {
    return this.clicked.pop();
  };

  ClickHandler.prototype.resetClicked = function() {
    var cell, j, ref, results;
    ref = this.clicked;
    results = [];
    for (j = ref.length - 1; j >= 0; j += -1) {
      cell = ref[j];
      results.push(this.unclickCell(cell));
    }
    return results;
  };

  ClickHandler.prototype.lastClicked = function() {
    return this.clicked[this.clicked.length - 1];
  };

  ClickHandler.prototype.checkSolution = function() {
    if (!this.solutionService.isSolution(this.clicked)) {
      return false;
    }
    this.goalContainer.deleteGoal(this.solutionService.valueIndex);
    this.board.deleteCells(this.tuplesClicked());
    this.clicked = [];
    return true;
  };

  ClickHandler.prototype.clickCell = function(cell) {
    var ref;
    if (this.clicked.length === 0 || this.areAdjacent(cell, this.lastClicked())) {
      if (ref = this.cell, indexOf.call(this.clicked, ref) < 0) {
        cell.select();
        return this.addToClicked(cell);
      }
    } else {
      this.resetClicked();
      return this.clickCell(cell);
    }
  };

  ClickHandler.prototype.areAdjacent = function(cell, otherCell) {
    return Math.abs(cell.row - otherCell.row) <= 1 && Math.abs(cell.col - otherCell.col) <= 1;
  };

  ClickHandler.prototype.unclickCell = function(cell) {
    var last;
    last = this.lastClicked();
    if (cell !== this.lastClicked()) {
      return null;
    }
    cell.unselect();
    return this.removeFromClicked(cell);
  };

  ClickHandler.prototype.onEnter = function(cell) {
    var ref;
    console.log(this.mouseDown);
    if (this.mouseDown && (this.clicked.length === 0 || this.areAdjacent(cell, this.lastClicked())) && (ref = this.cell, indexOf.call(this.clicked, ref) < 0)) {
      return this.clickCell(cell);
    }
  };

  ClickHandler.prototype.onDown = function(cell) {
    this.mouseDown = true;
    return this.clickCell(cell);
  };

  ClickHandler.prototype.onUp = function(cell) {
    this.mouseDown = false;
    return this.checkSolution();
  };

  ClickHandler.prototype.setMouseDown = function(val) {
    if (!val) {
      this.checkForSolution();
    }
    return this.mouseDown = val;
  };

  ClickHandler.prototype.isMouseDown = function() {
    return this.mouseDown;
  };

  ClickHandler.prototype.onSelect = function(cell) {
    if (!this.isSelected(cell)) {
      return this.clicked.push(cell);
    }
  };

  ClickHandler.prototype.onUnselect = function(cell) {
    if (this.isSelected(cell)) {
      if (this.clicked[this.clicked.length - 1] === cell) {
        cell.unselect();
        return this.clicked.pop();
      } else {
        throw "Last item in 'clicked' was not the given cell";
      }
    }
  };

  ClickHandler.prototype.unselectAll = function() {
    var i, j, ref;
    if (this.clicked.length < 1) {
      return;
    }
    for (i = j = ref = this.clicked.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
      this.clicked[i].unselect();
    }
    return this.clicked = [];
  };

  ClickHandler.prototype.isSelected = function(cell) {
    var iterCell, j, len, ref;
    ref = this.clicked;
    for (j = 0, len = ref.length; j < len; j++) {
      iterCell = ref[j];
      if (cell === iterCell) {
        return true;
      }
    }
    return false;
  };

  ClickHandler.prototype.checkForSolution = function() {
    if (this.solutionService.isSolution(this.clicked)) {
      this.goalContainer.deleteGoal(this.solutionService.valueIndex);
      this.board.deleteCells(this.tuplesClicked());
    }
    return this.unselectAll();
  };

  return ClickHandler;

})();

module.exports = ClickHandler;
