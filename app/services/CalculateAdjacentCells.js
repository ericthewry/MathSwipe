// Generated by CoffeeScript 1.9.3
var CalculateAdjacentCells, Tuple,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Tuple = require("../models/Tuple");

CalculateAdjacentCells = (function() {
  function CalculateAdjacentCells(grid1, cells, x1, y1) {
    var i, j, k, l, len, len1, ref, ref1;
    this.grid = grid1;
    this.cells = cells;
    this.x = x1;
    this.y = y1;
    this.checkAbove = bind(this.checkAbove, this);
    this.validLocation = bind(this.validLocation, this);
    this.get = bind(this.get, this);
    ref = [this.y - 1, this.y, this.y + 1];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = [this.x - 1, this.x, this.x + 1];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (i === this.y && j === this.x) {
          continue;
        }
        this.cells.push(this.validLocation(this.grid, i, j));
      }
    }
  }

  CalculateAdjacentCells.prototype.get = function() {
    return this.cells;
  };

  CalculateAdjacentCells.prototype.validLocation = function(grid, x, y) {
    var loc;
    loc = grid.at(x, y);
    if (loc === null) {
      return new Tuple(x, y);
    } else if (loc === false) {
      return null;
    } else {
      return this.checkAbove(x, y);
    }
  };

  CalculateAdjacentCells.prototype.checkAbove = function(x, y) {
    return this.validLocation(x, y - 1);
  };

  return CalculateAdjacentCells;

})();

module.exports = CalculateAdjacentCells;
