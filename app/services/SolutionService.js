// Generated by CoffeeScript 1.9.3
var InputSolver, SolutionService,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

InputSolver = require('./InputSolver');

SolutionService = (function() {
  function SolutionService(board, goals, RunningSum) {
    var g, i, len;
    this.board = board;
    this.RunningSum = RunningSum;
    this.goals = [];
    for (i = 0, len = goals.length; i < len; i++) {
      g = goals[i];
      this.goals.push(g);
    }
  }

  SolutionService.prototype.initialize = function(clickedCells) {
    this.setSolutionString(clickedCells);
    return this.value = InputSolver.compute(this.solution);
  };

  SolutionService.prototype.isSolution = function() {
    var ref;
    if (this.solution == null) {
      return false;
    }
    if (this.solution[this.solution.length - 1] === '+' || this.solution[this.solution.length - 1] === '-' || this.solution[this.solution.length - 1] === '*') {
      return false;
    }
    if (ref = this.value, indexOf.call(this.goals, ref) < 0) {
      return false;
    }
    if (!this.isCompleteExpression()) {
      this.RunningSum.display('Solution must include an operator');
      return false;
    }
    this.valueIndex = this.goals.indexOf(this.value);
    this.goals[this.valueIndex] = ' ';
    return true;
  };

  SolutionService.prototype.isCompleteExpression = function() {
    return this.solution.search(/-?\d+[-+\*]\d+/g) === 0;
  };

  SolutionService.prototype.setSolutionString = function(cells) {
    var c, i, len, results;
    this.solution = '';
    results = [];
    for (i = 0, len = cells.length; i < len; i++) {
      c = cells[i];
      results.push(this.solution += this.board.boardValues[c.row][c.col]);
    }
    return results;
  };

  return SolutionService;

})();

module.exports = SolutionService;
