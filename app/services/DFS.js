// Generated by CoffeeScript 1.9.3
var DFS, GridCell, Tuple;

Tuple = require('../models/Tuple');

GridCell = require('../models/GridCell');

DFS = (function() {
  function DFS() {}

  DFS.setEquationsOnGrid = function(grid, inputList, AdjacentCells1) {
    var col, i, j, results, row;
    this.grid = grid;
    this.AdjacentCells = AdjacentCells1;
    this.clearSolutionGrid();
    results = [];
    for (i = j = 0; j < 10000; i = ++j) {
      if (this.hasFoundSolution(inputList)) {
        break;
      }
      results.push((function() {
        var k, ref, results1;
        results1 = [];
        for (row = k = 0, ref = this.grid.dimension; 0 <= ref ? k < ref : k > ref; row = 0 <= ref ? ++k : --k) {
          results1.push((function() {
            var l, ref1, results2;
            results2 = [];
            for (col = l = 0, ref1 = this.grid.dimension; 0 <= ref1 ? l < ref1 : l > ref1; col = 0 <= ref1 ? ++l : --l) {
              this.grid.set(row, col, ' ');
              results2.push(this.clearSolutionGrid());
            }
            return results2;
          }).call(this));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  DFS.clearSolutionGrid = function() {
    var col, j, ref, results, row;
    this.solutionGrid = [];
    results = [];
    for (row = j = 0, ref = this.grid.dimension; 0 <= ref ? j < ref : j > ref; row = 0 <= ref ? ++j : --j) {
      this.solutionGrid.push([]);
      results.push((function() {
        var k, ref1, results1;
        results1 = [];
        for (col = k = 0, ref1 = this.grid.dimension; 0 <= ref1 ? k < ref1 : k > ref1; col = 0 <= ref1 ? ++k : --k) {
          results1.push(this.solutionGrid[row].push(new GridCell(col, row)));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  DFS.hasFoundSolution = function(inputList) {
    var cloneGrid, hasPlaced, i, index, j, k, ref, seedX, seedY;
    for (i = j = 0, ref = inputList.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      hasPlaced = false;
      for (index = k = 0; k < 20; index = ++k) {
        if (!hasPlaced) {
          cloneGrid = this.cloneSolutionGrid();
          seedX = Math.floor(Math.random() * this.grid.dimension);
          seedY = Math.floor(Math.random() * this.grid.dimension);
          if (this.search(seedX, seedY, inputList[i])) {
            hasPlaced = true;
          } else {
            this.solutionGrid = cloneGrid;
          }
        }
      }
      if (hasPlaced) {
        this.pushDownSolutionGrid();
      } else {
        return false;
      }
    }
    return true;
  };

  DFS.search = function(seedX, seedY, input) {
    var curr, toVisit;
    if (input.length === 0) {
      return true;
    }
    toVisit = this.shuffle(AdjacentCells.getAdjacent(this.solutionGrid, seedX, seedY));
    if (toVisit.length === 0) {
      return false;
    }
    curr = toVisit.pop();
    while (curr !== void 0) {
      this.solutionGrid[curr.y][curr.x].value = input[0];
      if (!this.search(curr.x, curr.y, input.slice(1, input.length))) {
        this.solutionGrid = cloneGrid;
        curr = toVisit.pop();
      } else {
        return true;
      }
    }
    return false;
  };

  DFS.cloneSolutionGrid = function() {
    var cloneGrid, col, j, k, ref, ref1, row;
    cloneGrid = [];
    for (row = j = 0, ref = this.solutionGrid.length; 0 <= ref ? j < ref : j > ref; row = 0 <= ref ? ++j : --j) {
      cloneGrid.push([]);
      for (col = k = 0, ref1 = this.solutionGrid.length; 0 <= ref1 ? k < ref1 : k > ref1; col = 0 <= ref1 ? ++k : --k) {
        cloneGrid[row].push(new GridCell(this.solutionGrid[y][x].y, this.solutionGrid[y][x].x));
        cloneGrid[row][col].value = this.solutionGrid[y][x].value;
      }
    }
    return cloneGrid;
  };

  DFS.pushDownSolutionGrid = function() {};

  DFS.shuffle = function(array) {
    var i, m, t;
    m = array.length;
    while (m) {
      i = Math.floor(Math.random() * m--);
      t = array[m];
      array[m] = array[i];
      array[i] = t;
    }
    return array;
  };

  return DFS;

})();

module.exports = DFS;
