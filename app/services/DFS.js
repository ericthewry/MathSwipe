// Generated by CoffeeScript 1.9.3
var AdjacentCellsCalculator, DFS, GameGrid, LastInColumn, Tuple, TupleSet,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

AdjacentCellsCalculator = require("./AdjacentCellsCalculator");

GameGrid = require("../models/GameGrid");

LastInColumn = require("./LastInColumn");

Tuple = require("../models/Tuple");

TupleSet = require("../models/TupleSet");

DFS = (function() {
  function DFS(grid) {
    this.grid = grid;
    this.search = bind(this.search, this);
    this.shuffle = bind(this.shuffle, this);
    this.getSeed = bind(this.getSeed, this);
  }

  DFS.prototype.getSeed = function(grid) {
    var i, j, len, ref, x, y;
    this.grid = grid;
    ref = this.grid;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      x = Math.floor(Math.random() * this.grid.length) + 1;
      y = Math.floor(Math.random() * this.grid.length) + 1;
      if (this.grid[y][x] !== null) {
        return [y, x];
      }
    }
    return false;
  };

  DFS.prototype.shuffle = function(array) {
    var i, m, t;
    m = array.length;
    t = void 0;
    i = void 0;
    while (m) {
      i = Math.floor(Math.random() * m--);
      t = array[m];
      array[m] = array[i];
      array[i] = t;
    }
    return array;
  };

  DFS.prototype.search = function(seed, input, takenCells) {
    var checker, curr, each, j, k, len, len1, ref, solution, toVisit;
    ref = takenCells.list;
    for (j = 0, len = ref.length; j < len; j++) {
      each = ref[j];
      console.log("takenCells.list = ", each);
    }
    if (input.length === 0) {
      return true;
    }
    toVisit = (new AdjacentCellsCalculator(this.grid, null, seed.x, seed.y)).calculate(takenCells.list);
    toVisit = this.shuffle(toVisit);
    for (k = 0, len1 = toVisit.length; k < len1; k++) {
      each = toVisit[k];
      console.log("toVisit = ", each);
    }
    if (toVisit.length === 0) {
      return false;
    }
    curr = toVisit.shift();
    checker = (new LastInColumn).isLastAndBlocking(this.grid.grid, curr.x, curr.y);
    if (checker) {
      return false;
    }
    while (curr !== void 0) {
      this.grid.set(curr.x, curr.y, input[0]);
      takenCells.push(new Tuple(curr.x, curr.y));
      solution = this.search(curr, input.slice(1, input.length), takenCells);
      if (solution) {
        return true;
      } else {
        this.grid.set(curr.x, curr.y, null);
        takenCells.pop();
        curr = toVisit.pop();
      }
    }
    return false;
  };

  return DFS;

})();

module.exports = DFS;
