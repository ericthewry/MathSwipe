// Generated by CoffeeScript 1.9.3
var Tuple, TupleSet;

TupleSet = require(app_path + "/models/TupleSet");

Tuple = require(app_path + "/models/Tuple");

describe('TupleSet', function() {
  describe('#constructor', function() {
    it('given unique list, adds each element', function() {
      var list, set, tuple1, tuple2;
      tuple1 = sinon.createStubInstance(Tuple);
      tuple2 = sinon.createStubInstance(Tuple);
      sinon.stub(TupleSet.prototype, 'contains', function() {
        return false;
      });
      list = [tuple1, tuple2];
      set = new TupleSet(list);
      (expect(set.length())).to.equal(2);
      return TupleSet.prototype.contains.restore();
    });
    it('given not-unique list, gives uniquified list', function() {
      var containsStub, set, tuples;
      tuples = [sinon.createStubInstance(Tuple)];
      tuples.push(sinon.createStubInstance(Tuple));
      tuples.push(sinon.createStubInstance(Tuple));
      tuples.push(sinon.createStubInstance(Tuple));
      containsStub = sinon.stub(TupleSet.prototype, 'contains');
      containsStub.onCall(0).returns(false);
      containsStub.onCall(1).returns(false);
      containsStub.onCall(2).returns(true);
      containsStub.onCall(3).returns(true);
      set = new TupleSet(tuples);
      (expect(set.set.length)).to.equal(2);
      return TupleSet.prototype.contains.restore();
    });
    return it('given no parameters, gives empty list', function() {
      return (expect((new TupleSet).set.length)).to.equal(0);
    });
  });
  describe('#push', function() {
    it('adds unique non-null elements to the set', function() {
      var set;
      sinon.stub(TupleSet.prototype, 'contains', function() {
        return false;
      });
      set = new TupleSet;
      set.push(sinon.createStubInstance(Tuple));
      (expect(set.set.length)).to.equal(1);
      return TupleSet.prototype.contains.restore();
    });
    it('doesnt add null elements', function() {
      var set;
      set = new TupleSet;
      set.push(null);
      return (expect(set.set.length)).to.equal(0);
    });
    return it('doesnt add duplicate elements', function() {
      var set;
      sinon.stub(TupleSet.prototype, 'contains', function() {
        return true;
      });
      set = new TupleSet;
      set.push(sinon.createStubInstance(Tuple));
      (expect(set.set.length)).to.equal(0);
      return TupleSet.prototype.contains.restore();
    });
  });
  describe('#pop', function() {
    return it('removes the last element', function() {
      var set;
      set = new TupleSet;
      set.set = ['a', 'b'];
      return (expect(set.pop())).to.equal('b');
    });
  });
  describe('#length', function() {
    return it('gives the length of the set', function() {
      var set;
      set = new TupleSet([]);
      set.set = [1, 1];
      return (expect(set.length())).to.equal(2);
    });
  });
  describe('#at', function() {
    it('returns value at valid index', function() {
      var tSet;
      tSet = new TupleSet([]);
      tSet.set = ['a', 'b', 'c'];
      (expect(tSet.at(0))).to.equal('a');
      (expect(tSet.at(1))).to.equal('b');
      return (expect(tSet.at(2))).to.equal('c');
    });
    return it('returns false if index is invalid', function() {
      var tSet;
      tSet = new TupleSet([]);
      tSet.set = ['a', 'b', 'c'];
      (expect(tSet.at(3))).to.equal(false);
      return (expect(tSet.at(99))).to.equal(false);
    });
  });
  return describe('#contains', function() {
    var set, tupAt;
    set = function(arr) {
      return new TupleSet(arr);
    };
    tupAt = function(x, y) {
      return new Tuple(x, y);
    };
    it('returns true when the tuple is equal to another in the list', function() {
      var tupleSet;
      tupleSet = set([tupAt(1, 1), tupAt(0, 0)]);
      (expect(tupleSet.contains(tupAt(1, 1)))).to.equal(true);
      return (expect(tupleSet.contains(tupAt(0, 0)))).to.equal(true);
    });
    it('returns false if it is not in the list', function() {
      var tupleSet;
      tupleSet = set([tupAt(1, 1, tupAt(0, 0))]);
      return (expect(tupleSet.contains(tupAt(9, 9)))).to.equal(false);
    });
    it('returns false if the list is empty', function() {
      var tupleSet;
      tupleSet = set([]);
      return (expect(tupleSet.contains(tupAt(1, 1)))).to.equal(false);
    });
    return it('returns false if the list is null', function() {
      var tupleSet;
      tupleSet = set([null, null, null]);
      return (expect(tupleSet.contains(tupAt(1, 1)))).to.equal(false);
    });
  });
});
