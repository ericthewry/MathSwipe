// Generated by CoffeeScript 1.9.3
var TupleSet;

TupleSet = require(app_path + "/models/TupleSet");

describe('TupleSet', function() {
  describe('#constructor', function() {
    it('given unique list, adds each element', function() {
      var list, set, tuple1, tuple2;
      tuple1 = {
        isElementOf: function() {}
      };
      tuple2 = {
        isElementOf: function() {}
      };
      sinon.stub(tuple1, 'isElementOf', function() {
        return false;
      });
      sinon.stub(tuple2, 'isElementOf', function() {
        return false;
      });
      list = [tuple1, tuple2];
      set = new TupleSet(list);
      return (expect(set.length())).to.equal(2);
    });
    it('given not-unique list, gives uniquified list', function() {
      var set, tuples;
      tuples = [
        {
          isElementOf: function() {}
        }
      ];
      tuples.push({
        isElementOf: function() {}
      });
      tuples.push({
        isElementOf: function() {}
      });
      tuples.push({
        isElementOf: function() {}
      });
      sinon.stub(tuples[0], 'isElementOf', function() {
        return false;
      });
      sinon.stub(tuples[1], 'isElementOf', function() {
        return false;
      });
      sinon.stub(tuples[2], 'isElementOf', function() {
        return true;
      });
      sinon.stub(tuples[3], 'isElementOf', function() {
        return true;
      });
      set = new TupleSet(tuples);
      return (expect(set.set.length)).to.equal(2);
    });
    it('given not-unique list, gives uniquified list', function() {
      var set, tuples;
      tuples = [
        {
          isElementOf: function() {}
        }
      ];
      tuples.push({
        isElementOf: function() {}
      });
      tuples.push({
        isElementOf: function() {}
      });
      tuples.push({
        isElementOf: function() {}
      });
      sinon.stub(tuples[0], 'isElementOf', function() {
        return false;
      });
      sinon.stub(tuples[1], 'isElementOf', function() {
        return false;
      });
      sinon.stub(tuples[2], 'isElementOf', function() {
        return true;
      });
      sinon.stub(tuples[3], 'isElementOf', function() {
        return true;
      });
      set = new TupleSet(tuples);
      return (expect(set.set.length)).to.equal(2);
    });
    return it('given no parameters, gives empty list', function() {
      return (expect((new TupleSet).length())).to.equal(0);
    });
  });
  describe('#push', function() {
    it('adds unique non-null elements to the set', function() {
      var set;
      set = new TupleSet;
      set.push({
        isElementOf: function(t) {
          return false;
        }
      });
      return (expect(set.set.length)).to.equal(1);
    });
    it('doesnt add null elements', function() {
      var set;
      set = new TupleSet;
      set.push(null);
      return (expect(set.set.length)).to.equal(0);
    });
    return it('doesnt add duplicate elements', function() {
      var set;
      set = new TupleSet;
      set.push({
        isElementOf: function(t) {
          return true;
        }
      });
      return (expect(set.set.length)).to.equal(0);
    });
  });
  describe('#pop', function() {
    return it('removes the last element', function() {
      var set;
      set = new TupleSet;
      set.set = ['a', 'b'];
      return (expect(set.pop())).to.equal('b');
    });
  });
  describe('#length', function() {
    return it('gives the length of the set', function() {
      var set;
      set = new TupleSet([
        {
          isElementOf: function(t) {
            return false;
          }
        }, {
          isElementOf: function(t) {
            return false;
          }
        }
      ]);
      return (expect(set.length())).to.equal(2);
    });
  });
  return describe('#at', function() {
    it('returns value at valid index', function() {
      var tSet;
      tSet = new TupleSet([]);
      tSet.set = ['a', 'b', 'c'];
      (expect(tSet.at(0))).to.equal('a');
      (expect(tSet.at(1))).to.equal('b');
      return (expect(tSet.at(2))).to.equal('c');
    });
    return it('returns false if index is invalid', function() {
      var tSet;
      tSet = new TupleSet([]);
      tSet.set = ['a', 'b', 'c'];
      (expect(tSet.at(3))).to.equal(false);
      return (expect(tSet.at(99))).to.equal(false);
    });
  });
});
