// Generated by CoffeeScript 1.9.3
var GameGrid;

GameGrid = require('../app/GameGrid');

describe('GameGrid', function() {
  describe('#constructor', function() {
    it('has appropriate methods', function() {
      var grid;
      grid = new GameGrid(3);
      (expect(grid)).to.have.property('at');
      (expect(grid)).to.have.property('set');
      (expect(grid)).to.have.property('validIndices');
      return (expect(grid)).to.have.property('constructor');
    });
    it('creates a two dimensional grid', function() {
      var grid;
      grid = (new GameGrid(3)).grid;
      (expect(grid)).to.have.length(3);
      return (expect(grid[0])).to.have.length(3);
    });
    return it('sets a dimension', function() {
      var dim;
      dim = (new GameGrid(3)).dimension;
      return (expect(dim)).to.equal(3);
    });
  });
  describe('#at', function() {
    var at, grid;
    grid = new GameGrid(2);
    at = grid.at;
    grid.grid = [[1, 2], [3, 4]];
    it('returns appropriate grid access', function() {
      (expect(at(0, 0))).to.equal(1);
      (expect(at(1, 0))).to.equal(2);
      (expect(at(0, 1))).to.equal(3);
      return (expect(at(1, 1))).to.equal(4);
    });
    return it('dis-allows access to improper indices', function() {
      (expect(at(3, 3))).to.equal(false);
      return (expect(at(7, 7))).to.equal(false);
    });
  });
  describe('#set', function() {
    var at, grid, set;
    grid = new GameGrid(2);
    set = grid.set;
    at = grid.at;
    it('adds valid values', function() {
      (expect(set(0, 0, 6))).to.equal(true);
      (expect(set(0, 1, 7))).to.equal(true);
      (expect(set(1, 0, 8))).to.equal(true);
      (expect(set(1, 1, 9))).to.equal(true);
      (expect(at(0, 0))).to.equal(6);
      (expect(at(0, 1))).to.equal(7);
      (expect(at(1, 0))).to.equal(8);
      return (expect(at(1, 1))).to.equal(9);
    });
    return it('dis-allows invalid values to be added', function() {
      (expect(set(2, 2))).to.equal(false);
      return (expect(set(99, 99))).to.equal(false);
    });
  });
  return describe('#invalidIndices', function() {
    var valid;
    valid = (new GameGrid(2)).validIndices;
    it('allows valid values', function() {
      (expect(valid(0, 0))).to.equal(true);
      (expect(valid(0, 1))).to.equal(true);
      (expect(valid(1, 0))).to.equal(true);
      return (expect(valid(1, 1))).to.equal(true);
    });
    return it('dis-allows invalid ', function() {
      (expect(valid(2, 2))).to.equal(false);
      return (expect(valid(99, 99))).to.equal(false);
    });
  });
});
